/*
 * Uptrends API v4
 *
 * This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// MonitorType 
type MonitorType string

// List of MonitorType
const (
	HTTP MonitorType = "Http"
	HTTPS MonitorType = "Https"
	CONNECT MonitorType = "Connect"
	PING MonitorType = "Ping"
	POP3 MonitorType = "POP3"
	SMTP MonitorType = "SMTP"
	FTP MonitorType = "FTP"
	MY_SQL MonitorType = "MySQL"
	MSSQL MonitorType = "MSSQL"
	WEBSERVICE_HTTP MonitorType = "WebserviceHttp"
	WEBSERVICE_HTTPS MonitorType = "WebserviceHttps"
	TRANSACTION MonitorType = "Transaction"
	DNS MonitorType = "DNS"
	FULL_PAGE_CHECK MonitorType = "FullPageCheck"
	REAL_BROWSER_CHECK MonitorType = "RealBrowserCheck"
	CERTIFICATE MonitorType = "Certificate"
	SFTP MonitorType = "SFTP"
	MULTI_STEP_API MonitorType = "MultiStepApi"
	IMAP MonitorType = "IMAP"
)

var allowedMonitorTypeEnumValues = []MonitorType{
	"Http",
	"Https",
	"Connect",
	"Ping",
	"POP3",
	"SMTP",
	"FTP",
	"MySQL",
	"MSSQL",
	"WebserviceHttp",
	"WebserviceHttps",
	"Transaction",
	"DNS",
	"FullPageCheck",
	"RealBrowserCheck",
	"Certificate",
	"SFTP",
	"MultiStepApi",
	"IMAP",
}

func (v *MonitorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MonitorType(value)
	for _, existing := range allowedMonitorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MonitorType", value)
}

// NewMonitorTypeFromValue returns a pointer to a valid MonitorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMonitorTypeFromValue(v string) (*MonitorType, error) {
	ev := MonitorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MonitorType: valid values are %v", v, allowedMonitorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MonitorType) IsValid() bool {
	for _, existing := range allowedMonitorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MonitorType value
func (v MonitorType) Ptr() *MonitorType {
	return &v
}

type NullableMonitorType struct {
	value *MonitorType
	isSet bool
}

func (v NullableMonitorType) Get() *MonitorType {
	return v.value
}

func (v *NullableMonitorType) Set(val *MonitorType) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorType) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorType(val *MonitorType) *NullableMonitorType {
	return &NullableMonitorType{value: val, isSet: true}
}

func (v NullableMonitorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

